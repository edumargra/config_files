#+title: My own config file for emacs (highly borrowed)
#+STARTUP: indent

** Reload/Visit this very file
*** visit
#+BEGIN_SRC emacs-lisp
  (defun bp-visit ()
    (interactive)
    (find-file "~/.emacs.d/baking_powder.org"))
  (global-set-key (kbd "C-c v") 'bp-visit)
#+END_SRC

*** reload
#+BEGIN_SRC emacs-lisp
  (defun bp-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/baking_powder.org")))
  (global-set-key (kbd "C-c  r") 'bp-reload)
#+END_SRC

** Emacs file generation
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

*** sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s e" . sudo-edit))
#+END_SRC
** Loose GUI section
*** writing (in general)
**** Parenthesis
***** electric (parenthesis pairing)
 #+BEGIN_SRC emacs-lisp
   (setq electric-pair-pairs '(
			       (?\( . ?\))
			       (?\[ . ?\])
			       (?\{ . ?\})
			       (?\" . ?\")
			       ))
   (electric-pair-mode t)
 #+END_SRC

***** rainbow (paranthesis color)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :init (rainbow-mode 1))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :init
    (rainbow-delimiters-mode 1))
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
**** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
**** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure f
    :config (global-hungry-delete-mode))
#+END_SRC
**** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
*** movement (in general)
**** subwords movement
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
**** avy (move around)
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
*** misce 
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** IDO (fuzzy for files)
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  (setq ido-everywhere t)
#+END_SRC

*** buffer behaviour
**** check buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  ;;(setq obuffer--expert t) don't ask for aconfirmation
#+END_SRC
**** kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
*** SMEX (fuzzy but for commands)
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
*** bars and screen

#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq scroll-conservatively 100)
#+END_SRC
*** show line and column
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
*** which-key (show keystrokes)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

*** switch windows
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** Org-mode
*** emacs-lisp source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+END_SRC
*** ToDo keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "WAITING" "TODO" "STARTED" "|" "DONE" "DELEGATED")))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Have a nice day!"))
#+end_src
** Auto completion
*** elisp
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
